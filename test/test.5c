#!/usr/bin/env nickle
/*
 * Copyright Â© 2004 Keith Packard
 *
 * This library is free software; you can redistribute it and/or
 * modify it either under the terms of the GNU Lesser General Public
 * License version 2.1 as published by the Free Software Foundation
 * (the "LGPL") or, at your option, under the terms of the Mozilla
 * Public License Version 1.1 (the "MPL"). If you do not alter this
 * notice, a recipient may use your version of this file under either
 * the MPL or the LGPL.
 *
 * You should have received a copy of the LGPL along with this library
 * in the file COPYING-LGPL-2.1; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * You should have received a copy of the MPL along with this library
 * in the file COPYING-MPL-1.1
 *
 * The contents of this file are subject to the Mozilla Public License
 * Version 1.1 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * This software is distributed on an "AS IS" basis, WITHOUT WARRANTY
 * OF ANY KIND, either express or implied. See the LGPL or the MPL for
 * the specific language governing rights and limitations.
 *
 * The Original Code is the cairo graphics library.
 *
 * The Initial Developer of the Original Code is Keith Packard
 *
 * Contributor(s):
 *      Keith Packard <keithp@keithp.com>
 */
    
autoimport Cairo;

import Image;

typedef struct {
    string		name;
    format_t		format;
    void(cairo_t)    	paint;
} image_test_t;

typedef struct {
    string		name;
    void(cairo_t)	test;
} quiet_test_t;

int test_width = 100;
int test_height = 100;

string font_name = "Bitstream Vera Sans-12";
string[*] font_names = {
    font_name,
    "Bitstream Vera Sans-12:bold",
    "Bitstream Vera Sans-12:italic",
    "Bitstream Vera Sans-12:bold:italic"
};

exception test_fail (string reason);

void test_check (bool ok, string reason, poly args ...) {
    if (!ok)
	raise test_fail (File::sprintf (reason, args ...));
}

/*
 * This computes a distance between two pixels and
 * warns the user if it is non-zero, while allowing
 * some error as different architectures may generate
 * slightly different colors
 */
real pixel_dist(int a, int b) {
	typedef struct {
		int a, r, g, b;
	} color;

	color get_color(int p) {
		return (color) {
			.a = (p >> 24) & 0xff,
			.r = (p >> 16) & 0xff,
			.g = (p >> 8) & 0xff,
			.b = p & 0xff
		};
	}

	real color_dist(color a, color b) {
		return sqrt(abs(a.a - b.a) ** 2 + abs(a.r - b.r) ** 2 +
			    abs(a.g - b.g) ** 2 + abs(a.b - b.b) ** 2);
	}
	
	return color_dist(get_color(a), get_color(b));
}

operator_t[*] operators = {
    operator_t.CLEAR, operator_t.SOURCE, operator_t.OVER,
    operator_t.IN, operator_t.OUT, operator_t.ATOP,
    operator_t.DEST, operator_t.DEST_OVER, operator_t.DEST_IN,
    operator_t.DEST_OUT, operator_t.DEST_ATOP, operator_t.XOR,
    operator_t.ADD, operator_t.SATURATE
};

line_join_t[*] line_joins = {
    line_join_t.MITER, line_join_t.ROUND, line_join_t.BEVEL
};

line_cap_t[*] line_caps = {
    line_cap_t.BUTT, line_cap_t.ROUND, line_cap_t.SQUARE
};

fill_rule_t[*] fill_rules = { fill_rule_t.WINDING, fill_rule_t.EVEN_ODD };

pattern_t
make_a_pattern ()
{
    int		w = test_width // 10;
    int		h = test_height // 10;
    surface_t	surf = Image::surface_create (format_t.ARGB, w, h);
    cairo_t	cs = create (surf);

    set_source_rgba (cs, 1, 1, 1, 1);
    paint (cs);
    set_source_rgba (cs, 0, 0, 0, 1);
    move_to (cs, 0, 0);
    line_to (cs, w, h);
    line_to (cs, w, 0);
    close_path (cs);
    fill (cs);
    destroy (cs);
    pattern_t pat = Pattern::create_for_surface (surf);
    Pattern::set_extend (pat, Pattern::extend_t.REPEAT);
    return pat;
}

pattern_t
make_another_pattern ()
{
    int		w = test_width / 4;
    int		h = test_height / 4;
    surface_t	surf = Image::surface_create (format_t.ARGB, w, h);
    cairo_t	cs = create (surf);

    set_operator (cs, operator_t.CLEAR);
    paint (cs);
    set_operator (cs, operator_t.SOURCE);
    set_source_rgba (cs, 0, 0, 0, 0.5);
    rectangle (cs, 0, 0, w/2, h/2);
    rectangle (cs, w/2, h/2, w/2, h/2);
    fill (cs);
    
    set_source_rgba (cs, 1, 1, 1, 0.5);
    rectangle (cs, 0, h/2, w/2, h/2);
    rectangle (cs, w/2, 0, w/2, h/2);
    fill (cs);
    destroy (cs);
    pattern_t pat = Pattern::create_for_surface (surf);
    Pattern::set_extend (pat, Pattern::extend_t.REPEAT);
    return pat;
}

pattern_t
make_linear_gradient_pattern ()
{
    pattern_t	pat = Pattern::create_linear (0, 0,
					      test_height / 4,
					      test_width / 4);
    Pattern::add_color_stop_rgba (pat, 0, 1, 0, 0, 1);
    Pattern::add_color_stop_rgba (pat, 1, 0, 1, 0, 0.8);
    Pattern::set_extend (pat, Pattern::extend_t.REPEAT);
    return pat;
}

pattern_t
make_radial_gradient_pattern ()
{
    pattern_t	pat = Pattern::create_radial (test_width / 2, test_height / 2,
					      0, 
					      test_width / 2, test_height / 2,
					      test_width / 4);
    Pattern::add_color_stop_rgba (pat, 1, 1, 0, 0, 1);
    Pattern::add_color_stop_rgba (pat, 0, 1, 1, 0, 0.8);
    Pattern::set_extend (pat, Pattern::extend_t.REFLECT);
    return pat;
}

void
star (cairo_t cr, real w, real h)
{
    save (cr);
    translate (cr, w/2, h/2);
    for (int p = 0; p < 5; p++) {
	rotate (cr, pi * 4 / 5);
	line_to (cr, 0, h/3);
    }
    fill (cr);
    restore (cr);    
}

void
many_paint (cairo_t cr, int n, void(cairo_t cr, real w, real h) sub_paint)
{
    int	nx = floor (sqrt (n));
    int ny = (n + (nx - 1)) // nx;
    int	    xinc = width (cr) // nx;
    int	    yinc = height (cr) // ny;

    for (int i = 0; i < n; i++) 
    {
	int x = (i % nx) * xinc;
	int y = (i // nx) * yinc;
	
	save (cr);
	rectangle (cr, x, y, xinc, yinc);
	clip (cr);
	translate (cr, x, y);
	sub_paint (cr, xinc, yinc);
	restore (cr);
    }
}

image_test_t[] image_tests = {
    {
	name = "paint",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 0, 0, 1);
	    paint (cr);
	    set_source_rgba (cr, 0, 1, 0, .5);
	    paint (cr);
	}
    },
    { 
	name = "line",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgb (cr, 1, 0, 0);
	    move_to (cr, 10, 10);
	    line_to (cr, 90, 90);
	    stroke (cr);
	}
    },
    {
	name = "box",
	format = format_t.RGB,
	paint = void func (cairo_t cr) {
	    set_source_rgb (cr, 0, 1, 0);
	    rectangle (cr, 5, 5, 60, 60);
	    fill (cr);
	}
    },
    {
	name = "circle",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 1, 0, .5);
	    arc (cr, 50, 50, 30, 0, 2 * pi);
	    stroke (cr);
	}
    },
    {
	name = "fill-preserve",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    rectangle (cr, 10, 10, 80, 80);
	    set_source_rgba (cr, 0, 1, 0, 1);
	    set_line_width (cr, 10);
	    fill_preserve (cr);
	    set_source_rgba (cr, 1, 0, 1, .5);
	    stroke (cr);
	}
    },
    {
	name = "stroke-preserve",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    rectangle (cr, 10, 10, 80, 80);
	    set_source_rgba (cr, 0, 1, 0, 1);
	    set_line_width (cr, 10);
	    stroke_preserve (cr);
	    set_source_rgba (cr, 1, 0, 1, .5);
	    fill (cr);
	}
    },
    {
	name = "clip",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    clip (cr);
	    rectangle (cr, 10, 30, 80, 40);
	    set_source_rgba (cr, 1, 0, 0, 1);
	    fill (cr);
	}
    },
    {
	name = "fill-extents",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    rect_t r = fill_extents (cr);
	    set_source_rgba (cr, 0, 0, 1, 1);
	    fill (cr);
	    rectangle (cr, r.x, r.y, r.width, r.height);
	    set_source_rgba (cr, 1, 1, 0, 0.5);
	    fill (cr);
	}
    },
    {
	name = "stroke-extents",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    set_line_width (cr, 20);
	    rect_t r = stroke_extents (cr);
	    set_source_rgba (cr, 0, 0, 1, 1);
	    stroke (cr);
	    rectangle (cr, r.x, r.y, r.width, r.height);
	    set_source_rgba (cr, 1, 1, 0, 0.5);
	    fill (cr);
	}
    },
    {
	name = "set-operator",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source (cr, make_a_pattern ());
	    paint (cr);
	    
	    set_source (cr, make_another_pattern ());

	    void sub_paint (cairo_t cr, real w, real h)
	    {
		static int o = 0;
		set_operator (cr, operators[o++]);
		paint (cr);
	    }

	    many_paint (cr, dim (operators), sub_paint);
	}
    },
    {
	name = "set-source",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    pattern_t[*]    pats = {
		make_a_pattern (),
		make_another_pattern (),
		make_linear_gradient_pattern (),
		make_radial_gradient_pattern (),
		Pattern::create_rgba (1, 1, 0, 1),
	    };
	    
	    void sub_paint (cairo_t cr, real w, real h) {
		static int p = 0;
		set_source (cr, pats[p++]);
		paint (cr);
	    }
	    
	    many_paint (cr, dim (pats), sub_paint);
	}
    },
    {
	name = "set-tolerance",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_tolerance (cr, 10);
	    set_source_rgba (cr, 1, 1, 0, 1);
	    arc (cr, 50, 50, 30, 0, 2*pi);
	    fill (cr);
	}
    },
    {
	name = "set-fill-rule",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 1, 1, 1);
	    void sub_paint (cairo_t cr, real w, real h) {
		static int r = 0;
		set_fill_rule (cr, fill_rules[r++]);
		star (cr, w, h);
	    }
	    many_paint (cr, dim (fill_rules), sub_paint);
	}
    },
    {
	name = "set-line-width",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 0, 1, 1);
	    
	    real[*] widths = { .5, 1, 2, 3, 5, 10 };

	    void sub_paint (cairo_t cr, real w, real h) {
		static int wi = 0;
		set_line_width (cr, widths[wi++]);
		move_to (cr, w * .1, h * .1);
		line_to (cr, w * .9, h * .9);
		stroke (cr);
	    }

	    many_paint (cr, dim (widths), sub_paint);
	}
    },
    {
	name = "set-line-cap",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 0, 1, 1);
	    
	    set_line_width (cr, 10);
	    void sub_paint (cairo_t cr, real w, real h) {
		static int c = 0;
		set_line_cap (cr, line_caps[c++]);
		move_to (cr, w * .2, h * .2);
		line_to (cr, w * .8, h * .8);
		stroke (cr);
	    }
	    many_paint (cr, dim (line_caps), sub_paint);
	}
    },
    {
	name = "set-line-join",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 1, 0, 1, 1);
	    
	    set_line_width (cr, 10);
	    void sub_paint (cairo_t cr, real w, real h) {
		static int j = 0;
		set_line_join (cr, line_joins[j++]);
		move_to (cr, w * .2, h * .2);
		line_to (cr, w * .8, h * .8);
		line_to (cr, w * .2, h * .8);
		stroke (cr);
	    }
	    many_paint (cr, dim (line_joins), sub_paint);
	}
    },
    {
	name = "set-miter-limit",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    real[*] miter_limits = {
		1, 5, 10, 20
	    };
	    set_source_rgba (cr, 1, 0, 1, 1);
	    
	    set_line_width (cr, 6);
	    set_line_join (cr, line_join_t.MITER);
	    
	    void sub_paint (cairo_t cr, real w, real h) {
		static int l = 0;
		set_miter_limit (cr, miter_limits[l++]);
		move_to (cr, w * .2, h * .2);
		line_to (cr, w * .8, h * .8);
		line_to (cr, w * .2, h * .5);
		stroke (cr);
	    }
	    many_paint (cr, dim (miter_limits), sub_paint);
	}
    },
    {
	name = "rotate",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    real[*] rotations = {
		0, pi * 1 / 8, pi * 3/4, pi * 7/5,
	    };
	    set_source_rgba (cr, 1, 0, 1, 1);
	    set_line_width (cr, 4);
	    void sub_paint (cairo_t cr, real w, real h) {
		static int r = 0;
		translate (cr, w/2, h/2);
		rotate (cr, rotations[r++]);
		translate (cr, -w/2, -h/2);
		move_to (cr, 0, h/2);
		line_to (cr, w, h/2);
		stroke (cr);
	    }
	    many_paint (cr, dim(rotations), sub_paint);
	}
    },
    {
	name = "paint-with-alpha",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source (cr, make_a_pattern ());
	    paint (cr);
	    set_source_rgb (cr, 0, 0, 1);
	    paint_with_alpha (cr, 0.5);
	}
    },
    {
	name = "mask",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    surface_t	mask_surf = Image::surface_create (format_t.A,
							   test_width,
							   test_height);
	    pattern_t	mask_pattern = Pattern::create_for_surface (mask_surf);
	    cairo_t	mask_cr = create (mask_surf);
	    set_operator (mask_cr, operator_t.CLEAR);
	    paint (mask_cr);
	    set_operator (mask_cr, operator_t.OVER);
	    set_source_rgba (mask_cr, 0, 0, 0, 1);
	    star (mask_cr, test_width, test_height);
	    
	    set_source (cr, make_a_pattern());
	    mask (cr, mask_pattern);
	}
    },
    {
	name = "append-path",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    path_t[*] path = {
		{move_to = {x = 25, y = 75}},
		{line_to = {x = 50, y = 25}},
		{line_to = {x = 75, y = 75}},
		{close_path = <>}
	    };
	    append_path (cr, path);
	    set_source_rgba (cr, 1, 0, 1, .8);
	    fill (cr);
	}
    },
    {
	name = "set-font",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 0, 0, 0, 1);
	    void sub_paint (cairo_t cr, real w, real h) {
		static int f = 0;
		set_font (cr, font_names[f++]);
		move_to (cr, 5, 20);
		show_text (cr, "Hello");
	    }
	    many_paint (cr, dim (font_names), sub_paint);
	}
    },
    {
	name = "set-font-size",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 0, 0, 0, 1);
	    set_font (cr, font_name);
	    real[*] font_sizes = {
		6, 10, 12, 18
	    };
	    void sub_paint (cairo_t cr, real w, real h) {
		static int s = 0;
		set_font_size (cr, font_sizes[s++]);
		move_to (cr, 5, 20);
		show_text (cr, "Hello");
	    }
	    many_paint (cr, dim (font_names), sub_paint);
	}
    },
    {
	name = "set-font-matrix",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_source_rgba (cr, 0, 0, 0, 1);
	    set_font (cr, font_name);
	    matrix_t[*] font_matrices = {
		{ 
		    xx = 10, yx = 0,
		    xy = 0, yy = 10,
		    x0 = 0, y0 = 0
		},
		{ 
		    xx = 10, yx = 2,
		    xy = 0, yy = 10,
		    x0 = 0, y0 = 0
		},
		{ 
		    xx = 8, yx = 4,
		    xy = 4, yy = 8,
		    x0 = 0, y0 = 0
		},
		{ 
		    xx = 10, yx = 0,
		    xy = 0, yy = -10,
		    x0 = 0, y0 = 0
		},
	    };
	    void sub_paint (cairo_t cr, real w, real h) {
		static int m = 0;
		set_font_matrix (cr, font_matrices[m++]);
		move_to (cr, 5, 30);
		show_text (cr, "Hello");
	    }
	    many_paint (cr, dim (font_names), sub_paint);
	}
    },
    {
	name = "show-text",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    move_to (cr, 10, 20);
	    set_font (cr, font_name);
	    show_text (cr, "Hello, world.");
	}
    },
    {
	name = "text-path",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    move_to (cr, 10, 40);
	    set_font (cr, font_name);
	    set_font_size (cr, 30);
	    text_path (cr, "Hello.");
	    set_line_width (cr, 1);
	    stroke (cr);
	}
    },
    {
	name = "text-extents",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    set_font (cr, font_name);
	    real x = 10;
	    real y = 40;
	    string text = "Hello, world.";
	    text_extents_t e = text_extents (cr, text);
	    set_source_rgba (cr, 1, 1, 1, 1);
	    rectangle (cr, x + e.x_bearing, y + e.y_bearing,
		       e.width, e.height);
	    fill (cr);
	    move_to (cr, x, y);
	    set_source_rgba (cr, 0, 0, 0, 1);
	    show_text (cr, text);
	    move_to (cr, x, y);
	    line_to (cr, x + e.x_advance, y + e.y_advance);
	    set_line_width (cr, 1);
	    set_source_rgba (cr, 1, 0, 0, 0.5);
	    stroke (cr);
	}
    },
    {
	name = "create-rgba",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    rgba_color_t[*] colors = {
		{ red = 1, green = 0, blue = 0, alpha = 1 },
		{ red = 0, green = 1, blue = 0, alpha = 1 },
		{ red = 0, green = 0, blue = 1, alpha = 1 },
		{ red = 0.5, green = 0, blue = 0, alpha = 0.75 },
		{ red = 0, green = 0.5, blue = 0, alpha = 0.75 },
		{ red = 0, green = 0, blue = 0.5, alpha = 0.75 },
	    };
	    void sub_paint (cairo_t cr, real w, real h) {
		static int c = 0;
		set_source (cr, Pattern::create_rgba (colors[c].red,
						      colors[c].green,
						      colors[c].blue,
						      colors[c].alpha));
		c++;
		paint (cr);
	    }
	    many_paint (cr, dim (colors), sub_paint);
	}
    },
    {
	name = "create-rgb",
	format = format_t.ARGB,
	paint = void func (cairo_t cr) {
	    rgb_color_t[*] colors = {
		{ red = 1, green = 0, blue = 0 },
		{ red = 0, green = 1, blue = 0 },
		{ red = 0, green = 0, blue = 1 },
		{ red = 0.5, green = 0, blue = 0 },
		{ red = 0, green = 0.5, blue = 0 },
		{ red = 0, green = 0, blue = 0.5 },
	    };
	    void sub_paint (cairo_t cr, real w, real h) {
		static int c = 0;
		set_source (cr, Pattern::create_rgb (colors[c].red,
						      colors[c].green,
						      colors[c].blue));
		c++;
		paint (cr);
	    }
	    many_paint (cr, dim (colors), sub_paint);
	}
    },
};

quiet_test_t[] quiet_tests = {
    {
	name = "get-operator",
	test = void func (cairo_t cr) {
	    for (int i = 0; i < dim (operators); i++) {
		set_operator (cr, operators[i]);
		test_check (get_operator (cr) == operators[i],
			    "get_operator returned wrong operator");
	    }
	}
    },
    {
	name = "get-source",
	test = void func (cairo_t cr) {
	    pattern_t	pat = make_a_pattern ();
	    pattern_t	old = get_source (cr);
	    
	    set_source (cr, pat);
	    test_check (get_source (cr) == pat,
			"get_source returned wrong pattern");
	}
    },
    {
	name = "get-tolerance",
	test = void func (cairo_t cr) {
	    for (real t = 11; t <= 81; t += 10) {
		set_tolerance (cr, t);
		test_check (get_tolerance (cr) == t,
			"get_tolerance returned wrong tolerance");
	    }
	}
    },
    {
	name = "get-current-point",
	test = void func (cairo_t cr) {
	    for (real x = 12; x < 82; x += 10) {
		for (real y = 13; y < 83; y += 10) {
		    move_to (cr, x, y);
		    point_t p = get_current_point (cr);
		    test_check (p.x == x && p.y == y,
			"get_current_point returned wrong point");
		}
	    }
	}
    },
    {
	name = "get-fill-rule",
	test = void func (cairo_t cr) {
	    for (int i = 0; i < dim (fill_rules); i++) {
		set_fill_rule (cr, fill_rules[i]);
		test_check (get_fill_rule (cr) == fill_rules[i],
			    "get_fill_rule returned wrong fill_rule");
	    }
	}
    },
    {
	name = "get-line-width",
	test = void func (cairo_t cr) {
	    for (real l = 1; l < 20; l++) {
		set_line_width (cr, l);
		test_check (get_line_width (cr) == l,
			    "get_line_width returned wrong width");
	    }
	}
    },
    {
	name = "get-line-cap",
	test = void func (cairo_t cr) {
	    for (int i = 0; i < dim (line_caps); i++) {
		set_line_cap (cr, line_caps[i]);
		test_check (get_line_cap (cr) == line_caps[i],
			    "get_line_cap returned wrong line_cap");
	    }
	}
    },
    {
	name = "get-line-join",
	test = void func (cairo_t cr) {
	    for (int i = 0; i < dim (line_joins); i++) {
		set_line_join (cr, line_joins[i]);
		test_check (get_line_join (cr) == line_joins[i],
			    "get_line_join returned wrong line_join");
	    }
	}
    },
    {
	name = "get-miter-limit",
	test = void func (cairo_t cr) {
	    for (real l = 1; l < 20; l++) {
		set_miter_limit (cr, l);
		test_check (get_miter_limit (cr) == l,
			    "get_miter_limit returned wrong limit");
	    }
	}
    },
    {
	name = "get-matrix",
	test = void func (cairo_t cr) {
	    for (real s = 1; s < 10; s++)
	    {
		matrix_t expect = {
		    xx = s, yx = 0,
		    xy = 0, yy = s,
		    x0 = 0, y0 = 0
		};
		save (cr);
		scale (cr, s, s);
		matrix_t m = get_matrix (cr);
		restore (cr);
		test_check (m == expect,
			    "get_matrix returned wrong matrix");
	    }
	}
    },
    {
	name = "get-font-matrix",
	test = void func (cairo_t cr) {
	    for (real s = 1; s < 30; s++)
	    {
		matrix_t expect = {
		    xx = s, yx = 0,
		    xy = 0, yy = s,
		    x0 = 0, y0 = 0
		};
		set_font_size (cr, s);
		matrix_t m = get_font_matrix (cr);
		test_check (m == expect,
			    "get_font_matrix returned wrong matrix");
	    }
	}
    },
    {
	name = "font-extents",
	test = void func (cairo_t cr) {
	    font_extents_t  expect = {
		ascent = 11, descent = 3, height = 14,
		max_x_advance = 16, max_y_advance = 0
	    };
	    set_font (cr, font_name);
	    font_extents_t  actual = font_extents(cr);
	    test_check (actual == expect,
			sprintf ("font_extents returned wrong value: %v != %v", expect, actual));
	}
    },
    
};

bool
run_image_test (image_test_t t, string srcdir)
{
    int variations = 0;
    printf ("%-20.20s ", t.name);
    twixt (surface_t out = surface_create (t.format, test_width, test_height);
	   Surface::destroy (out))
    {
	try {
	    twixt (cairo_t cr = create (out); destroy (cr))
		t.paint (cr);

	    try {
		twixt (surface_t ref = surface_create_from_png (srcdir + "/" +
						      t.name + "-ref.png");
		       Surface::destroy (ref)) 
		{
		    int	mask = t.format == format_t.RGB ? 0xffffff : ~0;

		    test_check (Surface::width (out) == Surface::width (ref),
				"width mismatch %g != %g", Surface::width(out),
				Surface::width (ref));
		    test_check (Surface::height (out) == Surface::height (ref),
				"height mismatch %g != %g", Surface::height(out),
				Surface::height (ref));
		    for (int y = 0; y < Surface::height (ref); y++)
			for (int x = 0; x < Surface::width (ref); x++) {
			    int out_p = Image::get_pixel (out, x, y) & mask;
			    int ref_p = Image::get_pixel (ref, x, y) & mask;
			    real dist = pixel_dist(out_p, ref_p);
			    if (dist != 0)
				++variations;
			    test_check (dist < 20,
					"pixel mismatch 0x%x not similar to 0x%x at %d %d",
					out_p, ref_p, x, y);
			}
		}
	    } catch File::open_error (string message, File::error_type error, 
				      string name) {
		raise test_fail (message + ": " + name);
	    } catch File::io_error (string message, File::error_type error,
				    file f) {
		raise test_fail (message);
	    }
	} catch test_fail (string reason) {
	    Surface::write_to_png (out, t.name + "-out.png");
	    printf (" failed: %s\n", reason);
	    return false;
	}
    }
    if (variations != 0)
	printf (" (%d minor variations)", variations);
    printf (" passed.\n");
    return true;
}

bool
run_quiet_test (quiet_test_t t, string srcdir)
{
    printf ("%-20.20s ", t.name);
    twixt (surface_t out = surface_create (format_t.ARGB, test_width, test_height);
	   Surface::destroy (out))
    {
	try {
	    twixt (cairo_t cr = create (out); destroy (cr))
		t.test (cr);
	} catch test_fail (string reason) {
	    printf (" failed: %s\n", reason);
	    return false;
	}
    }
    printf (" passed.\n");
    return true;
}

string srcdir = ".";

if (Environ::check ("SRCDIR")) srcdir = Environ::get ("SRCDIR");
if (dim (argv) > 1) srcdir = argv[1];

int
run_tests (string srcdir)
{
    int	failures = 0;
    
    for (int i = 0; i < dim (image_tests); i++)
	if (!run_image_test (image_tests[i], srcdir))
	    ++failures;
    for (int i = 0; i < dim (quiet_tests); i++)
	if (!run_quiet_test (quiet_tests[i], srcdir))
	    ++failures;
    return failures;
}

int i = run_tests (srcdir);
exit (i);
